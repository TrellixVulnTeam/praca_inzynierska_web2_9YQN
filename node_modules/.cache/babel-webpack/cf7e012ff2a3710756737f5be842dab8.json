{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../settings/settings.service\";\nimport * as i3 from \"ngx-toastr\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let CategoryService = /*#__PURE__*/(() => {\n  class CategoryService {\n    constructor(httpClient, settings, toastr) {\n      this.httpClient = httpClient;\n      this.settings = settings;\n      this.toastr = toastr;\n      this.params = new HttpParams();\n    }\n\n    getAllCategories() {\n      const apiUrl = this.settings.getApiUrl + '/api/Category/GetAllCategories';\n      return this.httpClient.get(apiUrl, {\n        withCredentials: true\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    getCategoryById(id) {\n      const apiUrl = this.settings.getApiUrl + '/api/category/GetCategoryById?id=' + id;\n      return this.httpClient.get(apiUrl).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    getCategoryByName(name) {\n      const apiUrl = this.settings.getApiUrl + '/api/category/FindByName';\n      this.params.delete('').append('name', name);\n      return this.httpClient.get(apiUrl, {\n        params: this.params\n      }).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    createCategory(category) {\n      const apiUrl = this.settings.getApiUrl + '/api/Category/CreateCategory';\n      return this.httpClient.post(apiUrl, category).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    updateCategory(category) {\n      const apiUrl = this.settings.getApiUrl + '/api/Category/UpdateCategory';\n      return this.httpClient.put(apiUrl, category, httpOptions).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    softDeleteCategory(id) {\n      const apiUrl = this.settings.getApiUrl + '/api/Category/SoftDeleteCategory?name=' + id;\n      return this.httpClient.delete(apiUrl, httpOptions).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    handleError(error) {\n      console.log(`HttpError: ${JSON.stringify(error)}`);\n      return throwError(error);\n    }\n\n  }\n\n  CategoryService.ɵfac = function CategoryService_Factory(t) {\n    return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SettingsService), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  CategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryService,\n    factory: CategoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return CategoryService;\n})();","map":null,"metadata":{},"sourceType":"module"}