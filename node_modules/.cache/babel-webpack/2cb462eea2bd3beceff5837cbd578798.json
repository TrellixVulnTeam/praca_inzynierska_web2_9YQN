{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { UserPermissionModel } from 'src/app/models/user-permissions/user-permission-model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../settings/settings.service\";\nconst PERMISSION_LIST = 'PERMISSIONS_LIST';\nexport let PermissionService = /*#__PURE__*/(() => {\n  class PermissionService {\n    constructor(httpClient, seetings) {\n      this.httpClient = httpClient;\n      this.seetings = seetings;\n      this.userId = '';\n      this.permissionList = [''];\n      this.permissionLongString = '';\n      this.permissionName = '';\n      this.isPermitted = false;\n      this.respond = new UserPermissionModel();\n    }\n\n    getPermissions(id) {\n      const apiUrl = this.seetings.getApiUrl + '/api/UserPermission/GetAllPermissionsForUser?userId=' + id;\n      return this.httpClient.get(apiUrl).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n\n    savePermissionsList(permissions) {\n      window.sessionStorage.removeItem(PERMISSION_LIST);\n      window.sessionStorage.setItem(PERMISSION_LIST, JSON.stringify(permissions));\n      window.sessionStorage.setItem(PERMISSION_LIST, JSON.stringify(permissions));\n    }\n\n    getPermissionList() {\n      var longString = window.sessionStorage.getItem(PERMISSION_LIST);\n      var a = 0;\n\n      if (longString != null) {\n        return longString;\n      } else {\n        return '';\n      }\n    }\n\n    isPermited(permissionNameToCheck) {\n      this.permissionLongString = this.getPermissionList();\n      this.permissionList = JSON.parse(this.permissionLongString);\n\n      for (let i = 0; i < this.permissionList.length; i++) {\n        if (this.permissionList[i] == permissionNameToCheck) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    handleError(error) {\n      console.log(`HttpError: ${JSON.stringify(error)}`);\n      return throwError(error);\n    }\n\n  }\n\n  PermissionService.ɵfac = function PermissionService_Factory(t) {\n    return new (t || PermissionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SettingsService));\n  };\n\n  PermissionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PermissionService,\n    factory: PermissionService.ɵfac,\n    providedIn: 'root'\n  });\n  return PermissionService;\n})();","map":null,"metadata":{},"sourceType":"module"}