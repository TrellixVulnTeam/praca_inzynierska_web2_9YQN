{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"../settings/settings.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  }),\n  params: new HttpParams()\n};\nexport let AuthorService = /*#__PURE__*/(() => {\n  class AuthorService {\n    constructor(httpClient, router, toastr, settings) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.toastr = toastr;\n      this.settings = settings;\n    }\n\n    getAllAuthors() {\n      const apiUrl = this.settings.getApiUrl + '/api/Author/GetAllAuthors';\n      return this.httpClient.get(apiUrl).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    getAllAuthorsToApprove() {\n      const apiUrl = this.settings.getApiUrl + '/api/Author/GetAuthorsToApprove';\n      return this.httpClient.get(apiUrl).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    getAuthorByName(name) {\n      const apiUrl = this.settings.getApiUrl + '/api/author/FindAuthorsByName?name=' + name;\n      return this.httpClient.get(apiUrl).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    getAuthorsByIds(ids) {\n      const apiUrl = this.settings.getApiUrl + '/api/author/FindAuthorsByName?name=' + ids;\n      return this.httpClient.get(apiUrl).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    createAuthor(author) {\n      const apiUrl = this.settings.getApiUrl + '/api/author/CreateAuthor';\n      return this.httpClient.post(apiUrl, author, httpOptions).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    approveAuthor(author) {\n      const apiUrl = this.settings.getApiUrl + '/api/author/ApproveAuthor';\n      return this.httpClient.put(apiUrl, author, httpOptions).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    updateAuthor(author) {\n      const apiUrl = this.settings.getApiUrl + '/api/author/UpdateAuthor';\n      return this.httpClient.put(apiUrl, author, httpOptions).pipe(map(responder => {\n        return responder;\n      }), catchError(error => {\n        this.toastr.error(error.error);\n        return this.handleError(error);\n      }));\n    }\n\n    handleError(error) {\n      console.log(`HttpError: ${JSON.stringify(error)}`);\n      return throwError(error);\n    }\n\n  }\n\n  AuthorService.ɵfac = function AuthorService_Factory(t) {\n    return new (t || AuthorService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.SettingsService));\n  };\n\n  AuthorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorService,\n    factory: AuthorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorService;\n})();","map":null,"metadata":{},"sourceType":"module"}