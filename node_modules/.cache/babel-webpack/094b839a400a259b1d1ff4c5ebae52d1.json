{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../settings/settings.service\";\nimport * as i3 from \"ngx-toastr\";\nconst USER_NAME = 'user-name';\nconst USER_ID = 'user-id';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  }),\n  params: new HttpParams()\n};\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpClient, settingsService, toastr) {\n      this.httpClient = httpClient;\n      this.settingsService = settingsService;\n      this.toastr = toastr;\n      this.userName = '';\n      this.userId = '';\n    }\n\n    postLogin(user) {\n      const apiUrl = this.settingsService.getApiUrl + `/api/Authorization/Login`;\n      return this.httpClient.post(apiUrl, user).pipe(map(tokenResposne => {\n        return tokenResposne;\n      }), catchError(error => {\n        this.toastr.error(JSON.stringify(error.error));\n        return this.handleError(error);\n      }));\n    }\n\n    postRegister(user) {\n      const apiUrl = this.settingsService.getApiUrl + '/api/Authorization/Register';\n      return this.httpClient.post(apiUrl, user).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n\n    getMe() {\n      const apiUrl = this.settingsService.getApiUrl + '/api/User/GetMeWithPassword';\n      return this.httpClient.get(apiUrl, {\n        withCredentials: true\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n\n    getUserNameById(id) {\n      const apiUrl = this.settingsService.getApiUrl + '/api/User/GetUserNameById?id=' + id;\n      return this.httpClient.get(apiUrl).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n\n    getUserById(id) {\n      const apiUrl = this.settingsService.getApiUrl + '/api/User/GetUserById?id=' + id;\n      return this.httpClient.get(apiUrl).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n\n    updateUser(user) {\n      const apiUrl = this.settingsService.getApiUrl + '/api/User/UpdateUser';\n      return this.httpClient.post(apiUrl, user).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return this.handleError(error);\n      }));\n    }\n\n    saveUserName(userName) {\n      window.sessionStorage.removeItem(USER_NAME);\n      window.sessionStorage.setItem(USER_NAME, userName);\n    }\n\n    getUserName() {\n      this.userName = window.sessionStorage.getItem(USER_NAME);\n\n      if (this.userName != null) {\n        return this.userName;\n      }\n\n      return '';\n    }\n\n    saveUserId(userId) {\n      window.sessionStorage.removeItem(USER_ID);\n      window.sessionStorage.setItem(USER_ID, userId);\n    }\n\n    getUserId() {\n      this.userId = window.sessionStorage.getItem(USER_ID);\n\n      if (this.userId != null) {\n        return this.userId;\n      }\n\n      return '';\n    }\n    /*\r\n    login(userName: string, password: string)\r\n    {\r\n        const apiUrl = this.settingsService.getApiUrl + `/api/Authorization/Login`;\r\n            //httpOptions.params = new HttpParams()\r\n        //  .set(`login`, userName)\r\n        //  .set(`password`, password);\r\n            var userModel = new LoginModel();\r\n        userModel.login = userName;\r\n        userModel.password = password;\r\n            return this.httpClient\r\n          .post(apiUrl, userModel)\r\n          .pipe(map(authTokenWithUser => {\r\n            console.log(\"RES: \" + JSON.stringify(authTokenWithUser));\r\n                localStorage.setItem('authTokenWithUser', JSON.stringify(authTokenWithUser));\r\n                return authTokenWithUser;\r\n          }),\r\n            catchError(error => {\r\n              return this.handleError(error);\r\n            }));\r\n        }\r\n    */\n\n\n    handleError(error) {\n      console.log(`HttpError: ${JSON.stringify(error)}`);\n      return throwError(error);\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SettingsService), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}